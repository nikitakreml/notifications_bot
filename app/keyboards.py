# app/keyboards.py
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

def user_menu_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="user_check")
    return kb.as_markup()

def admin_menu_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –î—ç—à–±–æ—Ä–¥", callback_data="admin_dashboard")
    kb.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications")
    kb.button(text="üóÇ –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", callback_data="admin_pending_list")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")
    kb.button(text="‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="admin_set_end")
    kb.button(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_list_active")
    kb.button(text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_check_user")
    kb.adjust(1)
    return kb.as_markup()

def back_to_admin_menu_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
    return kb.as_markup()

def approval_inline_kb(uid: int) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å {uid}", callback_data=f"admin_approve:{uid}")
    kb.button(text=f"üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å {uid}", callback_data=f"admin_reject:{uid}")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin_back")
    kb.adjust(2, 1)
    return kb.as_markup()

def approvals_keyboard_from_list(pending: list[tuple[int, str]]) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for uid, _ in pending:
        kb.button(text=f"‚úÖ {uid}", callback_data=f"admin_approve:{uid}")
        kb.button(text=f"üö´ {uid}", callback_data=f"admin_reject:{uid}")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin_back")
    kb.adjust(2, 1)
    return kb.as_markup()

def admin_dashboard_kb(filter_mode: str, page: int, has_prev: bool, has_next: bool) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if has_prev:
        kb.button(text="‚óÄÔ∏è", callback_data=f"admin_dash:{filter_mode}:{page-1}")
    if has_next:
        kb.button(text="‚ñ∂Ô∏è", callback_data=f"admin_dash:{filter_mode}:{page+1}")
    if has_prev or has_next:
        kb.adjust(2)
    # —Ñ–∏–ª—å—Ç—Ä—ã
    kb.row(
        types.InlineKeyboardButton(text=("‚Ä¢ –í—Å–µ" if filter_mode == "all" else "–í—Å–µ"),
                                   callback_data="admin_dash:all:0"),
        types.InlineKeyboardButton(text=("‚Ä¢ –° –¥–∞—Ç–æ–π" if filter_mode == "with" else "–° –¥–∞—Ç–æ–π"),
                                   callback_data="admin_dash:with:0"),
        types.InlineKeyboardButton(text=("‚Ä¢ –ë–µ–∑ –¥–∞—Ç—ã" if filter_mode == "without" else "–ë–µ–∑ –¥–∞—Ç—ã"),
                                   callback_data="admin_dash:without:0"),
    )
    # –Ω–∞–∑–∞–¥
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin_back"))
    return kb.as_markup()

def admin_notifications_kb(settings: dict) -> types.InlineKeyboardMarkup:
    def mark(b: bool) -> str: return "‚úÖ –í–∫–ª" if b else "‚ùå –í—ã–∫–ª"
    kb = InlineKeyboardBuilder()
    kb.button(text=f"–í—Å–µ: {mark(settings['master'])}", callback_data="admin_notif_toggle:master")
    kb.button(text=f"‚àí3 –¥–Ω—è 11:00: {mark(settings['tminus3'])}", callback_data="admin_notif_toggle:tminus3")
    kb.button(text=f"–í –¥–µ–Ω—å 11:00: {mark(settings['onday'])}", callback_data="admin_notif_toggle:onday")
    kb.button(text=f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {mark(settings['after'])}", callback_data="admin_notif_toggle:after")
    kb.adjust(1)
    kb.button(text="–í–∫–ª—é—á–∏—Ç—å –≤—Å—ë", callback_data="admin_notif_setall:on")
    kb.button(text="–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë", callback_data="admin_notif_setall:off")
    kb.adjust(2)
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin_back")
    return kb.as_markup()
