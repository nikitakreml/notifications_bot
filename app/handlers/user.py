from aiogram import Router, F, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.exceptions import TelegramBadRequest

from app.db import (
    add_pending, is_user_approved, get_user_end_time
)
from app.keyboards import user_menu_kb, approval_inline_kb, admin_menu_kb
from config import Config

router = Router()

@router.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id

    if user_id == Config.ADMIN_ID:
        await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu_kb())
        return

    if await is_user_approved(user_id):
        end_time = await get_user_end_time(user_id)
        text = "–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç." if not end_time else f"–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {end_time}"
        await message.answer(text, reply_markup=user_menu_kb())
        return

    created = await add_pending(user_id)
    await message.answer(
        "üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è."
    )

    if created:
        uname = ("@" + message.from_user.username) if message.from_user.username else "‚Äî"
        full_name = message.from_user.full_name or "‚Äî"
        text = (
            "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø\n"
            f"ID: {user_id}\n"
            f"Username: {uname}\n"
            f"–ò–º—è: {full_name}\n"
        )
        try:
            await message.bot.send_message(
                Config.ADMIN_ID,
                text,
                reply_markup=approval_inline_kb(user_id)
            )
        except Exception:
            pass

@router.message(StateFilter(None), F.text)
async def fallback_menu(message: types.Message):
    if message.from_user.id == Config.ADMIN_ID:
        await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu_kb())
    else:
        if not await is_user_approved(message.from_user.id):
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        await message.answer("–ú–µ–Ω—é:", reply_markup=user_menu_kb())

@router.callback_query(F.data == "user_check")
async def user_check(cb: types.CallbackQuery):
    if not await is_user_approved(cb.from_user.id):
        await cb.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.", show_alert=True)
        return
    end_time = await get_user_end_time(cb.from_user.id)
    text = "–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç." if not end_time else f"–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {end_time}"
    try:
        await cb.message.edit_text(text, reply_markup=user_menu_kb())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await cb.answer()
