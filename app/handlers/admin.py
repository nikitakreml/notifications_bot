from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.db import (
    get_pending_users, approve_user, remove_pending, get_active_users,
    get_user_end_time, set_end_time, get_all_users
)
from app.keyboards import (
    admin_menu_kb, approvals_keyboard_from_list, back_to_admin_menu_kb,
    admin_dashboard_kb
)
from app.states import AddUserSG, SetEndSG, CheckUserSG
from config import Config

router = Router()

PAGE_SIZE = 20  # —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –¥—ç—à–±–æ—Ä–¥–∞

def _format_dashboard_page(users: list[tuple[int, str|None, bool, bool]],
                           filter_mode: str, page: int) -> tuple[str, bool, bool, int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, has_prev, has_next, page, total_pages)
    users: (user_id, end_time, approved, active)
    """
    # –°—á—ë—Ç—á–∏–∫–∏ (–¥–æ —Ñ–∏–ª—å—Ç—Ä–∞)
    total = len(users)
    with_date_cnt = sum(1 for _, et, *_ in users if et)
    without_date_cnt = total - with_date_cnt

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if filter_mode == "with":
        users_f = [u for u in users if u[1]]
    elif filter_mode == "without":
        users_f = [u for u in users if not u[1]]
    else:
        users_f = list(users)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞—Ç—ã (–±–µ–∑ –¥–∞—Ç—ã –≤ –∫–æ–Ω—Ü–µ), –∑–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ
    def _sort_key(u):
        uid, et, *_ = u
        return (0 if et else 1, (et or "9999-99-99 99:99:99"))
    users_f.sort(key=_sort_key)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = max(1, (len(users_f) + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_slice = users_f[start:end]
    has_prev = page > 0
    has_next = page < (total_pages - 1)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    header = (
        "üìä <b>–î—ç—à–±–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
        f"–í—Å–µ–≥–æ: <b>{total}</b> | —Å –¥–∞—Ç–æ–π: <b>{with_date_cnt}</b> | –±–µ–∑ –¥–∞—Ç—ã: <b>{without_date_cnt}</b>\n"
        f"–°—Ç—Ä. {page+1}/{total_pages} | –§–∏–ª—å—Ç—Ä: <i>{'–≤—Å–µ' if filter_mode=='all' else ('—Å –¥–∞—Ç–æ–π' if filter_mode=='with' else '–±–µ–∑ –¥–∞—Ç—ã')}</i>\n"
    )

    if not page_slice:
        return header + "\n(–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞)", has_prev, has_next, page, total_pages

    # –¢–∞–±–ª–∏—Ü–∞ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    lines = ["<pre>UID        END_TIME            APPROVED ACTIVE",
             "----------------------------------------------"]
    for uid, et, approved, active in page_slice:
        et_disp = et if et else "‚Äî"
        appr = "‚úÖ" if approved else "‚ùå"
        act = "üü¢" if active else "‚ö™"
        lines.append(f"{str(uid):<10} {et_disp:<19} {appr:^8} {act:^6}")
    lines.append("</pre>")

    text = header + "\n".join(lines)
    return text, has_prev, has_next, page, total_pages

# ===== –ù–∞–∑–∞–¥ =====
@router.callback_query(F.data == "admin_back")
async def admin_back(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.clear()
    try:
        await cb.message.edit_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu_kb())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await cb.answer()

# ===== –î—ç—à–±–æ—Ä–¥: –≤—Ö–æ–¥ =====
@router.callback_query(F.data == "admin_dashboard")
async def admin_dashboard(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    users = await get_all_users()
    text, has_prev, has_next, page, _ = _format_dashboard_page(users, filter_mode="all", page=0)
    kb = admin_dashboard_kb("all", page, has_prev, has_next)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest:
        # –µ—Å–ª–∏ ¬´message is not modified¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await cb.message.edit_reply_markup(reply_markup=kb)
        except TelegramBadRequest:
            pass
    await cb.answer()

# ===== –î—ç—à–±–æ—Ä–¥: –ø–∞–≥–∏–Ω–∞—Ü–∏—è/—Ñ–∏–ª—å—Ç—Ä—ã =====
@router.callback_query(F.data.startswith("admin_dash:"))
async def admin_dashboard_page(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        _, filter_mode, page_str = cb.data.split(":", 2)
        page = int(page_str)
        if filter_mode not in {"all", "with", "without"}:
            filter_mode = "all"
    except Exception:
        filter_mode, page = "all", 0

    users = await get_all_users()
    text, has_prev, has_next, page, _ = _format_dashboard_page(users, filter_mode, page)
    kb = admin_dashboard_kb(filter_mode, page, has_prev, has_next)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            # –ø–æ–ø—Ä–æ–±—É–µ–º —Ö–æ—Ç—è –±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                await cb.message.edit_reply_markup(reply_markup=kb)
            except TelegramBadRequest:
                pass
        else:
            raise
    await cb.answer()

# ===== –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∑–∞—è–≤–∫–∏, approve/reject, FSM –∏ –ø—Ä.) –Ω–∏–∂–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π =====
# ... (–æ—Å—Ç–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª —Ç–∞–∫–∏–º, –∫–∞–∫ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∞–≤–æ–∫)

@router.callback_query(F.data == "admin_back")
async def admin_back(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.clear()
    try:
        await cb.message.edit_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu_kb())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await cb.answer()

@router.callback_query(F.data == "admin_pending_list")
async def admin_pending_list(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    rows = await get_pending_users()
    if not rows:
        try:
            await cb.message.edit_text("–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç.", reply_markup=admin_menu_kb())
        except TelegramBadRequest:
            pass
        await cb.answer()
        return
    lines = [f"‚Ä¢ {uid} ‚Äî —Å {created_at}" for uid, created_at in rows]
    text = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:\n" + "\n".join(lines)
    try:
        await cb.message.edit_text(text, reply_markup=approvals_keyboard_from_list(rows))
    except TelegramBadRequest:
        pass
    await cb.answer()

@router.callback_query(F.data.startswith("admin_approve:"))
async def admin_approve(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        uid = int(cb.data.split(":", 1)[1])
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    # –Ø–í–ù–û –æ–¥–æ–±—Ä—è–µ–º
    await approve_user(uid)
    await remove_pending(uid)

    try:
        await cb.bot.send_message(uid, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        end_time = await get_user_end_time(uid)
        text = "–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç." if not end_time else f"–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {end_time}"
        from app.keyboards import user_menu_kb
        await cb.bot.send_message(uid, text, reply_markup=user_menu_kb())
    except Exception:
        pass

    await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω.")
    rows = await get_pending_users()
    if rows:
        lines = [f"‚Ä¢ {u} ‚Äî —Å {ts}" for u, ts in rows]
        text = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:\n" + "\n".join(lines)
        try:
            await cb.message.edit_text(text, reply_markup=approvals_keyboard_from_list(rows))
        except TelegramBadRequest:
            pass
    else:
        try:
            await cb.message.edit_text("–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç.", reply_markup=admin_menu_kb())
        except TelegramBadRequest:
            pass

@router.callback_query(F.data.startswith("admin_reject:"))
async def admin_reject(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        uid = int(cb.data.split(":", 1)[1])
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    await remove_pending(uid)
    try:
        await cb.bot.send_message(uid, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception:
        pass

    await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    rows = await get_pending_users()
    if rows:
        lines = [f"‚Ä¢ {u} ‚Äî —Å {ts}" for u, ts in rows]
        text = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:\n" + "\n".join(lines)
        try:
            await cb.message.edit_text(text, reply_markup=approvals_keyboard_from_list(rows))
        except TelegramBadRequest:
            pass
    else:
        try:
            await cb.message.edit_text("–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç.", reply_markup=admin_menu_kb())
        except TelegramBadRequest:
            pass

# ===== –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FSM) =====
@router.callback_query(F.data == "admin_add_user")
async def admin_add_user_btn(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(AddUserSG.user_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).", reply_markup=back_to_admin_menu_kb())
    await cb.answer()

@router.message(AddUserSG.user_id, F.text)
async def admin_add_user_id(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    try:
        uid = int(message.text.strip())
        await approve_user(uid)     # <- —Å—Ä–∞–∑—É –æ–¥–æ–±—Ä—è–µ–º
        await remove_pending(uid)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–¥–æ–±—Ä–µ–Ω.", reply_markup=admin_menu_kb())
        await state.clear()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π user_id.", reply_markup=back_to_admin_menu_kb())

# ===== –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (FSM) =====
@router.callback_query(F.data == "admin_set_end")
async def admin_set_end(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(SetEndSG.user_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è.",
                               reply_markup=back_to_admin_menu_kb())
    await cb.answer()

@router.message(SetEndSG.user_id, F.text)
async def admin_set_end_user(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    try:
        uid = int(message.text.strip())
        await state.update_data(user_id=uid)
        await state.set_state(SetEndSG.dt_str)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD HH:MM:SS",
                             reply_markup=back_to_admin_menu_kb())
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π user_id.", reply_markup=back_to_admin_menu_kb())

@router.message(SetEndSG.dt_str, F.text)
async def admin_set_end_dt(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    dt_raw = message.text.strip()
    try:
        from datetime import datetime
        dt = datetime.strptime(dt_raw, "%Y-%m-%d %H:%M:%S")
        data = await state.get_data()
        uid = data["user_id"]
        await set_end_time(uid, dt.strftime("%Y-%m-%d %H:%M:%S"))
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è {uid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {dt}", reply_markup=admin_menu_kb())
        await state.clear()
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM:SS",
                             reply_markup=back_to_admin_menu_kb())

@router.callback_query(F.data == "admin_list_active")
async def admin_list_active(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    rows = await get_active_users()
    if not rows:
        text = "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."
    else:
        lines = [f"‚Ä¢ {uid} ‚Äî –¥–æ {et}" for uid, et in rows]
        text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(lines)
    try:
        await cb.message.edit_text(text, reply_markup=admin_menu_kb())
    except TelegramBadRequest:
        pass
    await cb.answer()

@router.callback_query(F.data == "admin_check_user")
async def admin_check_user(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(CheckUserSG.user_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=back_to_admin_menu_kb())
    await cb.answer()

@router.message(CheckUserSG.user_id, F.text)
async def admin_check_user_id(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    try:
        uid = int(message.text.strip())
        et = await get_user_end_time(uid)
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: " + ("–¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç" if not et else f"–¥–æ—Å—Ç—É–ø –¥–æ {et}")
        await message.answer(text, reply_markup=admin_menu_kb())
        await state.clear()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π user_id.", reply_markup=back_to_admin_menu_kb())
