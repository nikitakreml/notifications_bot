from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.db import (
    get_pending_users, approve_user, remove_pending, get_active_users,
    get_user_end_time, set_end_time, get_all_users,
    get_settings, toggle_setting, set_all_notifications,
)
from app.keyboards import (
    admin_menu_kb, approvals_keyboard_from_list, back_to_admin_menu_kb,
    admin_dashboard_kb, admin_notifications_kb,
    admin_set_picker_kb, back_to_set_list_kb,
)
from app.states import AddUserSG, SetEndSG, CheckUserSG, ApproveUserSG
from config import Config

router = Router()

PAGE_SIZE = 20

def _format_dashboard_page(
    users: list[tuple[int, str|None, str|None, bool, bool]],
    filter_mode: str,
    page: int,
) -> tuple[str, bool, bool, int, int]:
    total = len(users)
    with_date_cnt = sum(1 for _, __, et, ___, ____ in users if et)
    without_date_cnt = total - with_date_cnt

    if filter_mode == "with":
        users_f = [u for u in users if u[2]]
    elif filter_mode == "without":
        users_f = [u for u in users if not u[2]]
    else:
        users_f = list(users)

    users_f.sort(key=lambda u: (0 if u[2] else 1, u[2] or "9999-99-99 99:99:99"))

    total_pages = max(1, (len(users_f) + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))
    start, end = page * PAGE_SIZE, page * PAGE_SIZE + PAGE_SIZE
    page_slice = users_f[start:end]
    has_prev = page > 0
    has_next = page < (total_pages - 1)

    header = (
        "üìä <b>–î—ç—à–±–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
        f"–í—Å–µ–≥–æ: <b>{total}</b> | —Å –¥–∞—Ç–æ–π: <b>{with_date_cnt}</b> | –±–µ–∑ –¥–∞—Ç—ã: <b>{without_date_cnt}</b>\n"
        f"–°—Ç—Ä. {page+1}/{total_pages} | –§–∏–ª—å—Ç—Ä: <i>"
        f"{'–≤—Å–µ' if filter_mode=='all' else ('—Å –¥–∞—Ç–æ–π' if filter_mode=='with' else '–±–µ–∑ –¥–∞—Ç—ã')}</i>\n"
    )
    if not page_slice:
        return header + "\n(–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞)", has_prev, has_next, page, total_pages

    lines = [
        "<pre>NAME                  UID        END_TIME            APPROVED ACTIVE",
        "-------------------------------------------------------------------"
    ]
    for uid, name, et, approved, active in page_slice:
        nm = (name or "‚Äî")[:20]
        et_disp = et if et else "‚Äî"
        appr = "‚úÖ" if approved else "‚ùå"
        act = "üü¢" if active else "‚ö™"
        lines.append(f"{nm:<20} {str(uid):<10} {et_disp:<19} {appr:^8} {act:^6}")
    lines.append("</pre>")
    text = header + "\n".join(lines)
    return text, has_prev, has_next, page, total_pages

# ----- back -----
@router.callback_query(F.data == "admin_back")
async def admin_back(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.clear()
    try:
        await cb.message.edit_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu_kb())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await cb.answer()

# ----- dashboard -----
@router.callback_query(F.data == "admin_dashboard")
async def admin_dashboard(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    users = await get_all_users()
    text, has_prev, has_next, page, _ = _format_dashboard_page(users, "all", 0)
    kb = admin_dashboard_kb("all", page, has_prev, has_next)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest:
        try:
            await cb.message.edit_reply_markup(reply_markup=kb)
        except TelegramBadRequest:
            pass
    await cb.answer()

@router.callback_query(F.data.startswith("admin_dash:"))
async def admin_dashboard_page(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        _, filter_mode, page_str = cb.data.split(":", 2)
        page = int(page_str)
        if filter_mode not in {"all", "with", "without"}:
            filter_mode = "all"
    except Exception:
        filter_mode, page = "all", 0

    users = await get_all_users()
    text, has_prev, has_next, page, _ = _format_dashboard_page(users, filter_mode, page)
    kb = admin_dashboard_kb(filter_mode, page, has_prev, has_next)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            try:
                await cb.message.edit_reply_markup(reply_markup=kb)
            except TelegramBadRequest:
                pass
        else:
            raise
    await cb.answer()

# ----- notifications (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) -----
@router.callback_query(F.data == "admin_notifications")
async def admin_notifications(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    s = await get_settings()
    text = (
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        f"–í—Å–µ: {'<b>–í–∫–ª</b>' if s['master'] else '<b>–í—ã–∫–ª</b>'}\n"
        f"‚àí3 –¥–Ω—è –≤ 11:00: {'–í–∫–ª' if s['tminus3'] else '–í—ã–∫–ª'}\n"
        f"–í –¥–µ–Ω—å 11:00: {'–í–∫–ª' if s['onday'] else '–í—ã–∫–ª'}\n"
        f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (1—á): {'–í–∫–ª' if s['after'] else '–í—ã–∫–ª'}\n"
        "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å."
    )
    kb = admin_notifications_kb(s)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest:
        try:
            await cb.message.edit_reply_markup(reply_markup=kb)
        except TelegramBadRequest:
            pass
    await cb.answer()

@router.callback_query(F.data.startswith("admin_notif_toggle:"))
async def admin_notifications_toggle(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    key = cb.data.split(":", 1)[1]
    s = await toggle_setting(key)
    text = (
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        f"–í—Å–µ: {'<b>–í–∫–ª</b>' if s['master'] else '<b>–í—ã–∫–ª</b>'}\n"
        f"‚àí3 –¥–Ω—è –≤ 11:00: {'–í–∫–ª' if s['tminus3'] else '–í—ã–∫–ª'}\n"
        f"–í –¥–µ–Ω—å 11:00: {'–í–∫–ª' if s['onday'] else '–í—ã–∫–ª'}\n"
        f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (1—á): {'–í–∫–ª' if s['after'] else '–í—ã–∫–ª'}\n"
    )
    kb = admin_notifications_kb(s)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            try:
                await cb.message.edit_reply_markup(reply_markup=kb)
            except TelegramBadRequest:
                pass
        else:
            raise
    await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

@router.callback_query(F.data.startswith("admin_notif_setall:"))
async def admin_notifications_setall(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    val = cb.data.split(":", 1)[1]
    s = await set_all_notifications(val == "on")
    text = (
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        f"–í—Å–µ: {'<b>–í–∫–ª</b>' if s['master'] else '<b>–í—ã–∫–ª</b>'}\n"
        f"‚àí3 –¥–Ω—è –≤ 11:00: {'–í–∫–ª' if s['tminus3'] else '–í—ã–∫–ª'}\n"
        f"–í –¥–µ–Ω—å 11:00: {'–í–∫–ª' if s['onday'] else '–í—ã–∫–ª'}\n"
        f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (1—á): {'–í–∫–ª' if s['after'] else '–í—ã–∫–ª'}\n"
    )
    kb = admin_notifications_kb(s)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest:
        try:
            await cb.message.edit_reply_markup(reply_markup=kb)
        except TelegramBadRequest:
            pass
    await cb.answer("–ì–æ—Ç–æ–≤–æ")

# ----- –∑–∞—è–≤–∫–∏: —Ç–µ–ø–µ—Ä—å approve -> –≤–≤–æ–¥ –∏–º–µ–Ω–∏ -----
@router.callback_query(F.data == "admin_pending_list")
async def admin_pending_list(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    rows = await get_pending_users()
    if not rows:
        try:
            await cb.message.edit_text("–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç.", reply_markup=admin_menu_kb())
        except TelegramBadRequest:
            pass
        await cb.answer()
        return
    lines = [f"‚Ä¢ {uid} ‚Äî —Å {created_at}" for uid, created_at in rows]
    text = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:\n" + "\n".join(lines)
    try:
        await cb.message.edit_text(text, reply_markup=approvals_keyboard_from_list(rows))
    except TelegramBadRequest:
        pass
    await cb.answer()

@router.callback_query(F.data.startswith("admin_approve:"))
async def admin_approve_ask_name(cb: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ UID."""
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        uid = int(cb.data.split(":", 1)[1])
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    await state.update_data(approve_uid=uid)
    await state.set_state(ApproveUserSG.name)
    await cb.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –¥–ª—è UID <b>{uid}</b>.\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</i>",
        reply_markup=back_to_admin_menu_kb()
    )
    await cb.answer()

@router.message(ApproveUserSG.name, F.text)
async def admin_approve_save_name(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∏ –æ–¥–æ–±—Ä–∏—Ç—å."""
    if message.from_user.id != Config.ADMIN_ID:
        return
    data = await state.get_data()
    uid = data.get("approve_uid")
    if not uid:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∑–∞–Ω–æ–≤–æ.", reply_markup=admin_menu_kb())
        await state.clear()
        return

    name = (message.text or "").strip()
    if len(name) < 2:
        await message.answer("‚ùó –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.",
                             reply_markup=back_to_admin_menu_kb())
        return

    await approve_user(int(uid), name)
    await remove_pending(int(uid))
    await state.clear()

    # —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(int(uid), "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        et = await get_user_end_time(int(uid))
        from app.keyboards import user_menu_kb
        await message.bot.send_message(int(uid), ("–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç." if not et else f"–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {et}"),
                                       reply_markup=user_menu_kb())
    except Exception:
        pass

    await message.answer(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{name}</b> (UID {uid}) —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
                         reply_markup=admin_menu_kb())

@router.callback_query(F.data.startswith("admin_reject:"))
async def admin_reject(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        uid = int(cb.data.split(":", 1)[1])
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    await remove_pending(uid)
    try:
        await cb.bot.send_message(uid, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception:
        pass
    await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    rows = await get_pending_users()
    if rows:
        lines = [f"‚Ä¢ {u} ‚Äî —Å {ts}" for u, ts in rows]
        text = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:\n" + "\n".join(lines)
        try:
            await cb.message.edit_text(text, reply_markup=approvals_keyboard_from_list(rows))
        except TelegramBadRequest:
            pass
    else:
        try:
            await cb.message.edit_text("–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç.", reply_markup=admin_menu_kb())
        except TelegramBadRequest:
            pass

# ----- —Å–ø–∏—Å–æ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è) -----
@router.callback_query(F.data == "admin_set_end")
async def admin_set_end_open_list(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    users = await get_all_users()
    users.sort(key=lambda u: (0 if u[2] else 1, u[2] or "9999-99-99 99:99:99"))
    page = 0
    total_pages = max(1, (len(users) + PAGE_SIZE - 1) // PAGE_SIZE)
    items = [(uid, name, et) for uid, name, et, _appr, _act in users[0:PAGE_SIZE]]
    text = "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</b>"
    kb = admin_set_picker_kb(items, page, total_pages)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest:
        try:
            await cb.message.edit_reply_markup(reply_markup=kb)
        except TelegramBadRequest:
            pass
    await state.clear()
    await cb.answer()

@router.callback_query(F.data.startswith("admin_set_list:"))
async def admin_set_end_paginate(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        page = int(cb.data.split(":", 1)[1])
    except Exception:
        page = 0

    users = await get_all_users()
    users.sort(key=lambda u: (0 if u[2] else 1, u[2] or "9999-99-99 99:99:99"))
    total_pages = max(1, (len(users) + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))
    start, end = page * PAGE_SIZE, page * PAGE_SIZE + PAGE_SIZE
    items = [(uid, name, et) for uid, name, et, _appr, _act in users[start:end]]

    text = "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</b>"
    kb = admin_set_picker_kb(items, page, total_pages)
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            try:
                await cb.message.edit_reply_markup(reply_markup=kb)
            except TelegramBadRequest:
                pass
        else:
            raise
    await cb.answer()

@router.callback_query(F.data.startswith("admin_set_pick:"))
async def admin_set_end_pick_user(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        _p, uid_str, page_str = cb.data.split(":")
        uid = int(uid_str); page = int(page_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    await state.update_data(user_id=uid, return_page=page)
    await state.set_state(SetEndSG.dt_str)
    await cb.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è <b>{uid}</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>YYYY-MM-DD HH:MM:SS</code>",
        reply_markup=back_to_set_list_kb(page)
    )
    await cb.answer()

@router.message(SetEndSG.dt_str, F.text)
async def admin_set_end_dt(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    data = await state.get_data()
    if not data or "user_id" not in data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=admin_menu_kb())
        await state.clear()
        return
    uid = data["user_id"]; page = int(data.get("return_page", 0))
    dt_raw = message.text.strip()

    try:
        from datetime import datetime
        dt = datetime.strptime(dt_raw, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>YYYY-MM-DD HH:MM:SS</code>",
                             reply_markup=back_to_set_list_kb(page))
        return

    await set_end_time(uid, dt.strftime("%Y-%m-%d %H:%M:%S"))
    await message.answer(f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è <b>{uid}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{dt}</b>")

    users = await get_all_users()
    users.sort(key=lambda u: (0 if u[2] else 1, u[2] or "9999-99-99 99:99:99"))
    total_pages = max(1, (len(users) + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))
    start, end = page * PAGE_SIZE, page * PAGE_SIZE + PAGE_SIZE
    items = [(u, n, et) for u, n, et, _appr, _act in users[start:end]]

    text = "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</b>"
    kb = admin_set_picker_kb(items, page, total_pages)
    await message.answer(text, reply_markup=kb)
    await state.clear()

# ----- —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id -> –∏–º—è -----
@router.callback_query(F.data == "admin_add_user")
async def admin_add_user_btn(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(AddUserSG.user_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ <b>user_id</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).",
                               reply_markup=back_to_admin_menu_kb())
    await cb.answer()

@router.message(AddUserSG.user_id, F.text)
async def admin_add_user_id(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    try:
        uid = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π user_id.",
                             reply_markup=back_to_admin_menu_kb())
        return
    await state.update_data(user_id=uid)
    await state.set_state(AddUserSG.name)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).",
                         reply_markup=back_to_admin_menu_kb())

@router.message(AddUserSG.name, F.text)
async def admin_add_user_name(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    data = await state.get_data()
    uid = data.get("user_id")
    if not uid:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ user_id.", reply_markup=back_to_admin_menu_kb())
        return

    name = (message.text or "").strip()
    if len(name) < 2:
        await message.answer("‚ùó –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.",
                             reply_markup=back_to_admin_menu_kb())
        return

    await approve_user(int(uid), name)   # –æ–¥–æ–±—Ä—è–µ–º —Å –∏–º–µ–Ω–µ–º
    await remove_pending(int(uid))
    await state.clear()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{name}</b> (UID {uid}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–¥–æ–±—Ä–µ–Ω.",
                         reply_markup=admin_menu_kb())

# ----- –ø—Ä–æ—á–µ–µ -----
@router.callback_query(F.data == "admin_list_active")
async def admin_list_active(cb: types.CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    rows = await get_active_users()
    text = "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç." if not rows else \
        "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"‚Ä¢ {uid} ‚Äî –¥–æ {et}" for uid, et in rows])
    try:
        await cb.message.edit_text(text, reply_markup=admin_menu_kb())
    except TelegramBadRequest:
        pass
    await cb.answer()

@router.callback_query(F.data == "admin_check_user")
async def admin_check_user(cb: types.CallbackQuery, state: FSMContext):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    from app.states import CheckUserSG
    await state.set_state(CheckUserSG.user_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞.",
                               reply_markup=back_to_admin_menu_kb())
    await cb.answer()

@router.message(CheckUserSG.user_id, F.text)
async def admin_check_user_id(message: types.Message, state: FSMContext):
    if message.from_user.id != Config.ADMIN_ID:
        return
    try:
        uid = int(message.text.strip())
        et = await get_user_end_time(uid)
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: " + ("–¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç" if not et else f"–¥–æ—Å—Ç—É–ø –¥–æ {et}")
        await message.answer(text, reply_markup=admin_menu_kb())
        await state.clear()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π user_id.",
                             reply_markup=back_to_admin_menu_kb())
